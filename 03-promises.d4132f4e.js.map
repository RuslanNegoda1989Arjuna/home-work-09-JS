{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CACXC,KAAMC,SAASC,cAAc,SAC7BC,MAAOF,SAASC,cAAc,kBAC9BE,KAAMH,SAASC,cAAc,iBAC7BG,OAAQJ,SAASC,cAAc,oBA8BjC,SAASI,EAAcC,EAAUJ,GAC/B,OAAO,IAAIK,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EACFF,EAAQ,CAAEF,WAAUJ,UAEpBO,EAAO,CAAEH,WAAUJ,S,GAEpBA,E,IApCPJ,EAAKC,KAAKe,iBAAiB,UAQH,SAANC,GAChBA,EAAIC,iBAEJ,IADA,IAA8BC,EA+BvB,CACLf,MAAOgB,OAAOpB,EAAKI,MAAMiB,OACzBhB,KAAMe,OAAOpB,EAAKK,KAAKgB,OACvBf,OAAQc,OAAOpB,EAAKM,OAAOe,QAlCvBC,EAAwBH,EAAxBf,MAAOC,EAAiBc,EAAjBd,KAAMC,EAAWa,EAAXb,OACViB,EAAW,EAAGA,GAAYjB,EAAQiB,GAAY,EACrDhB,EAAcgB,EAAUD,GACrBE,MAAK,SAAAC,G,IAAGjB,EAAQiB,EAARjB,SAAUJ,EAAKqB,EAALrB,MACjBsB,EAAA5B,GAAS6B,OAAOC,QACd,uBAAwCC,OAAfrB,EAAS,QAAYqB,OAANzB,EAAM,M,IAGjD0B,OAAM,SAAAL,G,IAAGjB,EAAQiB,EAARjB,SAAUJ,EAAKqB,EAALrB,MAClBsB,EAAA5B,GAAS6B,OAAOI,QACd,sBAAqCF,OAAfrB,EAAS,QAAYqB,OAANzB,EAAM,M,IAGjDkB,GAASjB,C","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst refs = {\n  form: document.querySelector('.form'),\n  delay: document.querySelector('[name=\"delay\"]'),\n  step: document.querySelector('[name=\"step\"]'),\n  amount: document.querySelector('[name=\"amount\"]'),\n};\n\nrefs.form.addEventListener('submit', onSubmit);\n\n// Напиши скрипт, який на момент сабміту форми викликає функцію\n// createPromise(position, delay) стільки разів, скільки ввели в\n// поле amount.Під час кожного виклику передай їй номер промісу(position),\n// що створюється, і затримку, враховуючи першу затримку(delay),\n// введену користувачем, і крок(step).\n\nfunction onSubmit(evt) {\n  evt.preventDefault();\n  let { delay, step, amount } = getData();\n  for (let position = 1; position <= amount; position += 1) {\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n    delay += step;\n  }\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nfunction getData() {\n  return {\n    delay: Number(refs.delay.value),\n    step: Number(refs.step.value),\n    amount: Number(refs.amount.value),\n  };\n}\n"],"names":["$iU1Pc","parcelRequire","$ce04d3a99e08e73b$var$refs","form","document","querySelector","delay","step","amount","$ce04d3a99e08e73b$var$createPromise","position","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","evt","preventDefault","ref","Number","value","delay1","position1","then","param","$parcel$interopDefault","Notify","success","concat","catch","failure"],"version":3,"file":"03-promises.d4132f4e.js.map"}